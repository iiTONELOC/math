"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
function division(n, d) {
    let q = 0;
    let r = n;
    if (d <= 0) {
        throw new Error('d must be greater than 0');
    }
    if (n % 1 !== 0 || d % 1 !== 0) {
        throw new Error('n and d must be integers');
    }
    if (n < 0) {
        while (r < 0) {
            q = q - 1;
            r = r + d;
        }
    }
    else {
        while (r >= d) {
            q = q + 1;
            r = r - d;
        }
    }
    return [q, r];
}
exports.default = division;
if (((_a = process === null || process === void 0 ? void 0 : process.argv[1]) === null || _a === void 0 ? void 0 : _a.includes(path.normalize('division/index.ts'))) || ((_b = process === null || process === void 0 ? void 0 : process.argv[1]) === null || _b === void 0 ? void 0 : _b.includes(path.normalize('division/index.js')))) {
    const n = parseInt(process.argv[2], 10);
    const d = parseInt(process.argv[3], 10);
    const showMod = process.argv[4] === '--show-mod';
    try {
        const [q, r] = division(n, d);
        console.log(`${n} div ${d} = ${q} ${showMod ? `and ${n} mod ${d} = ${r}` : ''}`);
    }
    catch (error) {
        console.error(error.message);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbnVtYmVyX3N5c3RlbXMvYWxnb3JpdGhtcy9kaXZpc2lvbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2QkFBNkI7QUEyQjdCLFNBQXdCLFFBQVEsQ0FBQyxDQUFTLEVBQUUsQ0FBUztJQUNqRCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDVixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFHVixJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDUixNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7S0FDL0M7SUFHRCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQzVCLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztLQUMvQztJQUVELElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNQLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNWLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ1YsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDYjtLQUNKO1NBQU07UUFDSCxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDWCxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNWLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2I7S0FDSjtJQUVELE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbEIsQ0FBQztBQTNCRCwyQkEyQkM7QUFHRCxJQUFJLENBQUEsTUFBQSxPQUFPLGFBQVAsT0FBTyx1QkFBUCxPQUFPLENBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQywwQ0FBRSxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLE1BQUksTUFBQSxPQUFPLGFBQVAsT0FBTyx1QkFBUCxPQUFPLENBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQywwQ0FBRSxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUEsRUFBRTtJQUVwSSxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4QyxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4QyxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFlBQVksQ0FBQztJQUNqRCxJQUFJO1FBQ0EsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBYSxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUNwRjtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ1osT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDaEM7Q0FFSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XHJcblxyXG4vKlxyXG5JbnB1dDogSW50ZWdlcnMgbiBhbmQgZCA+IDAuXHJcbk91dHB1dDogcSA9IG4gZGl2IGQsIGFuZCByID0gbiBtb2QgZC5cclxuKi9cclxuXHJcbi8qKlxyXG4gKiBUaGUgRGl2aXNpb24gQWxnb3JpdGhtXHJcbiAqXHJcbiAqIHEgOj0gMFxyXG4gKiByIDo9IG5cclxuICpcclxuICogQ2FzZSAxOiBuIDwgMDpcclxuICpcclxuICogV2hpbGUgKCByIDwgMCApXHJcbiAqICBxIDo9IHEgLSAxXHJcbiAqICByIDo9IHIgKyBkXHJcbiAqXHJcbiAqIENhc2UgMjogbiA+PSAwOlxyXG4gKlxyXG4gKiBXaGlsZSAoIHIg4omlIGQgKVxyXG4gKiAgcSA6PSBxICsgMVxyXG4gKiAgciA6PSByIC0gZFxyXG4gKlxyXG4gKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpdmlzaW9uKG46IG51bWJlciwgZDogbnVtYmVyKTogW251bWJlciwgbnVtYmVyXSB7XHJcbiAgICBsZXQgcSA9IDA7XHJcbiAgICBsZXQgciA9IG47XHJcblxyXG4gICAgLy8gZW5zdXJlIHRoYXQgd2UgaGF2ZSB2YWxpZCBpbnRlZ2Vyc1xyXG4gICAgaWYgKGQgPD0gMCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZW5zdXJlIHRoYXQgbiBhbmQgZCBhcmUgaW50ZWdlcnMgYW5kIG5vdCBkZWNpbWFsc1xyXG4gICAgaWYgKG4gJSAxICE9PSAwIHx8IGQgJSAxICE9PSAwKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCduIGFuZCBkIG11c3QgYmUgaW50ZWdlcnMnKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobiA8IDApIHtcclxuICAgICAgICB3aGlsZSAociA8IDApIHtcclxuICAgICAgICAgICAgcSA9IHEgLSAxO1xyXG4gICAgICAgICAgICByID0gciArIGQ7XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB3aGlsZSAociA+PSBkKSB7XHJcbiAgICAgICAgICAgIHEgPSBxICsgMTtcclxuICAgICAgICAgICAgciA9IHIgLSBkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gW3EsIHJdO1xyXG59XHJcblxyXG4vLyBwcm92aWRlIGEgY2xpIGludGVyZmFjZVxyXG5pZiAocHJvY2Vzcz8uYXJndlsxXT8uaW5jbHVkZXMocGF0aC5ub3JtYWxpemUoJ2RpdmlzaW9uL2luZGV4LnRzJykpIHx8IHByb2Nlc3M/LmFyZ3ZbMV0/LmluY2x1ZGVzKHBhdGgubm9ybWFsaXplKCdkaXZpc2lvbi9pbmRleC5qcycpKSkge1xyXG5cclxuICAgIGNvbnN0IG4gPSBwYXJzZUludChwcm9jZXNzLmFyZ3ZbMl0sIDEwKTtcclxuICAgIGNvbnN0IGQgPSBwYXJzZUludChwcm9jZXNzLmFyZ3ZbM10sIDEwKTtcclxuICAgIGNvbnN0IHNob3dNb2QgPSBwcm9jZXNzLmFyZ3ZbNF0gPT09ICctLXNob3ctbW9kJztcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgW3EsIHJdOiBudW1iZXJbXSA9IGRpdmlzaW9uKG4sIGQpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGAke259IGRpdiAke2R9ID0gJHtxfSAke3Nob3dNb2QgPyBgYW5kICR7bn0gbW9kICR7ZH0gPSAke3J9YCA6ICcnfWApO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=